{
  "keyboard_shortcut": "", 
  "name": "Restore {{version}} Samples", 
  "language": "Python", 
  "trigger_enabled": false, 
  "rank": 100, 
  "trigger": "trigger_postopen",
  "script_version": "{{script_version}}",
  "value": [
    "version = '{{version}}'", 
    "", 
    "def restore(version):", 
    "    import os.path", 
    "    import shutil", 
    "    from xpcom.components import classes as Cc, interfaces as Ci", 
    "", 
    "    koDirs = Cc['@activestate.com/koDirs;1'].getService(Ci.koIDirs)", 
    "    obsolete_tools_folder = os.path.join(koDirs.userDataDir, 'obsolete-tools')", 
    "    toolbox_svc = Cc['@activestate.com/koToolbox2Service;1'].getService()", 
    "    parent = komodo.macro.parent", 
    "", 
    "    folder_name = 'Samples (%s)' % (version,)", 
    "    src_dir = os.path.join(obsolete_tools_folder, folder_name)", 
    "    prompter = Cc['@activestate.com/asDialogProxy;1'].getService(Ci.asIDialogProxy)", 
    "", 
    "    if os.path.exists(os.path.join(parent.path, folder_name)):", 
    "        prompter.alert('%s samples already exist!' % (version,))", 
    "        # don't delete this macro, maybe the user will fix things", 
    "        return", 
    "    elif os.path.exists(src_dir):", 
    "        # Restore to where this macro lives", 
    "        if not os.path.exists(parent.path):", 
    "            # How did this macro run!?  Ah well...", 
    "            os.makedirs(parent.path)", 
    "        toolbox_svc.importDirectory(parent.path, src_dir)", 
    "        shutil.rmtree(src_dir)", 
    "    else:", 
    "        # Old samples are missing :(", 
    "        prompter.alert('Could not find old %s samples to restore :(' % (version,))", 
    "", 
    "    # Delete this macro", 
    "    if parent:", 
    "        parent.removeChild(komodo.macro)", 
    "        if not parent.getChildren() and parent.parent:", 
    "            # no more obsolete things to restore; remove empty container", 
    "            parent.parent.removeChild(parent)", 
    "        obs = Cc['@mozilla.org/observer-service;1'].getService(Ci.nsIObserverService)", 
    "        obs.notifyObservers(None, 'toolbox-tree-changed', None)", 
    "", 
    "try:", 
    "    restore(version)", 
    "except Exception:", 
    "    import logging", 
    "    log = logging.getLogger('toolbox.restore')", 
    "    log.exception('Error restoring %s' % (version,))"
  ], 
  "version": "1.0.11", 
  "async": false, 
  "type": "macro", 
  "icon": "chrome://icomoon/skin/icons/new-tab.png"
}