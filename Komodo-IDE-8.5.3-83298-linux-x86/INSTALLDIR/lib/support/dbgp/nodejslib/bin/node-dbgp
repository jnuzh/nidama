#!/usr/bin/env node
// Copyright (c) 2011 ActiveState Software Inc.
// See the LICENSE file for licensing information.

var dbgp = require('../lib/dbgp.js'),
    repl = require('repl'),
    path = require('path'),
    spawn = require('child_process').spawn;

function kill() {
  if (child) {
   child.kill();
   child = null;
  }
}

process.on('uncaughtException', function(e) {
  kill();
  console.error(e.message);
  console.error(e.stack);
  process.exit(1);
});
process.on('exit', kill);

// Launch node debuggee and attach the V8 debugger.
// Process the debugger args, and pull them out.  Debugger args end
// with the name of the file we'll be debugging.
var args = process.argv.slice(2);
var i = 0;
var arg, port = 9000, host;
while (i < args.length) {
  arg = args[i];
  if (arg[0] !== "-") {
    // the file name
    break;
  } else if (arg == "-p" || arg == "-port") {
    port = parseInt(args[i + 1]);
    args.splice(i, 2);
  } else if (arg == "-h" || arg == "-host") {
    host = args[i + 1];
    args.splice(i, 2);
  } else if (arg == "--") {
    args.splice(i, 1);
    break;
  } else {
    // not a recognized option; skip over it
    ++i;
  }
}
args.unshift('--debug-brk');
var childIsAlive = true;
var child = spawn(process.execPath, args);
child.on('exit', function(code, signal) {
    childIsAlive = false;
});

// Attach dbgp client
var cwd = path.dirname(process.cwd());
var file = path.resolve(cwd, args[1]);
var dbgpEngine = new dbgp.Engine(child, file, port, host);
dbgpEngine.on('exit', function() {
  // Child should already be killed.
  if (childIsAlive) {
    try {
      child.kill();
    } catch(ex) {
      console.error("Error trying to end child process: " + ex);
    }
  }
  process.exit(0);
}.bind(this));

dbgpEngine.once('ready', function() {
  dbgpEngine.connect();
});
