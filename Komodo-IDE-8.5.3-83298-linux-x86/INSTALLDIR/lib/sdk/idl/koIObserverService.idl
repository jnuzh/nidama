/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 * 
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 * The Original Code is Komodo code.
 * 
 * The Initial Developer of the Original Code is ActiveState Software Inc.
 * Portions created by ActiveState Software Inc are Copyright (C) 2010
 * ActiveState Software Inc. All Rights Reserved.
 * 
 * Contributor(s):
 *   ActiveState Software Inc
 * 
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 * 
 * ***** END LICENSE BLOCK ***** */

#include "nsIObserver.idl"

[scriptable, uuid(70b283b4-6d23-4c3f-ab8f-f66e4910105d)]
interface koIObserverService : nsIObserver {
    /**
     * Registers the given listener for notifications regarding the specified
     * topics.
     *
     * @param anObserver : The interface pointer which will receive notifications.
     * @param aTopics    : The array of notification topics to listen for.
     * @param ownsWeak   : If set to false, the nsIObserverService will hold a 
     *                     strong reference to |anObserver|.  If set to true and 
     *                     |anObserver| supports the nsIWeakReference interface,
     *                     a weak reference will be held.  Otherwise an error will be
     *                     returned.
     */
    void addObserverForTopics(in nsIObserver anObserver,
                              in unsigned long count,
                              [array, size_is(count)] in string topics,
                              in boolean ownsWeak);

    /**
     * Unregisters a given listener for notifications regarding the specified
     * topics.
     *
     * @param anObserver : The interface pointer which will stop recieving
     *                     notifications.
     * @param aTopics    : The array of notification topics to listen for.
     */
    void removeObserverForTopics(in nsIObserver anObserver,
                                 in unsigned long count,
                                 [array, size_is(count)] in string topics);

};
