/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Komodo.
 *
 * The Initial Developer of the Original Code is
 * ActiveState Software Inc.
 * Portions created by the Initial Developer are Copyright (C) 2011
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface koIAsyncCallback;
interface koIAsyncOperation;
interface koINotification;

/**
 * An adapter class to convert a koIAsyncOperation into a koINotification
 */
[scriptable, uuid(ab858a76-6222-420d-89a6-7d101c817323)]
interface koINotificationAsyncCallbackAdapter : nsISupports {
    /**
     * Initialize the adapter
     * @param aOperation The koIAsyncOperation to adapt
     * @param aIdentifier The identifier for the koINotification
     * @param aTags The tags for the koINotification
     * @param aContext The context for the koINotification
     * @param aTypes Extra interfaces this notification should support;
     *               see koINotificationManager.TYPE_* constants
     */
    void initAsyncAdapter(in koIAsyncOperation aOperation,
                          in ACString aIdentifier,
                          [array, size_is(aTagCount)] in wstring aTags,
                          in unsigned long aTagCount,
                          [optional] in nsISupports aContext,
                          [optional] in unsigned long aTypes);

    /**
     * The chained callback
     */
    attribute koIAsyncCallback next;

    /**
     * The wrapped notification
     */
    readonly attribute koINotification notification;
};
