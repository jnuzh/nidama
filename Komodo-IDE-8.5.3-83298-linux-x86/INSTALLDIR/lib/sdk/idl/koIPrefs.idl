/* Copyright (c) 2000-2006 ActiveState Software Inc.
   See the file LICENSE.txt for licensing information. */

#include "nsISupports.idl"
#include "nsIEnumerator.idl"
#include "nsIObserverService.idl"
#include "nsIObserver.idl"

interface koIFile;
interface koIObserverService;

// A component which provides a unit test.
[scriptable, uuid(899516f6-06a4-4ffa-b75e-7616f43030a3)]
interface koITestable : nsISupports {
  void testComponent();
};

// A serializable object. Writes itself to the specified file 
// -- usually as a stream of XML elements.
// Note: This interface should be split out into a separate IDL file
// and stored in a more "global" location.
[scriptable, uuid(1912A0AE-D9A4-4f55-A4E0-A80DAD21396D)]
interface koISerializable : nsISupports {
    /**
     * The serialize method is now private
     * @deprecated since Komodo 7.0.0
     */
  [deprecated] void serialize(in koIFile file, in wstring basedir);
  void serializeToFile(in wstring filename);
};

[scriptable, uuid(7d310389-0f33-45c0-8765-c6dab8fcbdd3)]
interface koISerializableFast : koISerializable {
  void serializeToFileFast(in wstring filename);
};

// A preference.
// Every preference has an id.
[scriptable, uuid(b0504b20-ab16-46bd-868a-9b3f9f9ed3c6)]
interface koIPreference : koISerializable {
  attribute AString id;
  attribute string type;

  // clone a copy of this preference set and all child preferences.
  koIPreference clone();
  // update from another preference set object - presumably a modified clone!
  void update(in koIPreference source);

  // For debugging.
  void dump(in long indent);
};

[scriptable, uuid(5789255d-5d6f-471e-ac03-a4c5f2c7880a)]
interface koIPreferenceSetObjectFactory : nsISupports {
  koIPreference deserializeFile(in wstring filename);
};

[scriptable, uuid(f89ad940-3168-4240-bb5f-b944fba8ca51)]
interface koIPreferenceSimpleValue : koIPreference {
  // Get the best "nsISupportsPrimitives" interface for this value.
  // A QI on this object for this IID is (almost ;-) guaranteed to succeed.
  readonly attribute nsIIDRef primitiveIID;
};

// Allows preference change notifications to be notified.  Re-use the
// nsIObserver interface for the notification.
[scriptable, uuid(0720887f-ebd3-45d8-a236-7a6c3585dfa0)]
interface koIPreferenceObserver: nsISupports {
    /**
     * prefset id is the topic, pref name is the data
     *
     * @deprecated since Komodo 6.0.0, use prefObserverService instead.
     */
    readonly attribute nsIObserverService observerService;
    
    /**
     * Used to monitor preference changes. Can monitor individual preferences,
     * or all preferences when the preference name '' (empty string) is used.
     * The prefset id is sent as the data, and prefname as the topic.
     */
    readonly attribute koIObserverService prefObserverService;
    
    /**
     * @deprecated since Komodo 6.0.0, use prefObserverService instead.
     */
    void addObserver( in nsIObserver anObserver);
    /**
     * @deprecated since Komodo 6.0.0, use prefObserverService instead.
     */
    void removeObserver( in nsIObserver anObserver);
};

// A set of preferences -- a dictionary-like object with
// strings as keys and preferences as values having a one-to-one
// relationship between keys and values.
[scriptable, uuid(d52b54f3-9229-4690-81d3-14dcc5971b30)]
interface koIPreferenceSet : koIPreference {
  // A reference to the parent of this preference set,
  // or null if this preference set has no parent set.
  attribute koIPreferenceSet parent;

  // Returns the ids of all prefs stored in the preference set.
  void getPrefIds([array, size_is(count)] out wstring ids,
                out unsigned long count);

  // Returns the ids of all prefs stored in the preference set,
  // *including* those in the parent (recursive)
  void getAllPrefIds([array, size_is(count)] out wstring ids,
                out unsigned long count);
  
  // Set a preference in the preference set. If the preference does not
  // currently exist then a new one with the given name is created. If
  // the preference is of a simple type then one of the set*Pref() methods
  // can be used. More complex preferences contain arbitrary objects and
  // provide serialize and deserialize methods for persisting themselves.
  // They must use setPref().
  
  // If any of these fail, use the lastErrorSvc to find out why
  void setPref(in AString prefName, in koIPreference pref);
  void setString(in AString prefName, in AString pref);
  void setLong(in AString prefName, in long pref);
  void setDouble(in AString prefName, in double pref);
  void setBoolean(in AString prefName, in boolean pref);
  /**
   * @deprecated since Komodo 8.5
   * Use the shorter versions (setString, setLong, etc...)
   */
  void setStringPref(in AString prefName, in AString pref);
  void setLongPref(in AString prefName, in long pref);
  void setDoublePref(in AString prefName, in double pref);
  void setBooleanPref(in AString prefName, in boolean pref);
  
  // Retrieve a particular preference from the preference set.
  // It is an error to "get" a preference which does not exist or is of the
  // wrong type. Use "has*Pref" to ensure the pref exists.
  koIPreference getPref(in AString prefName);
  wstring getPrefType(in AString prefName);
  AString getStringPref(in AString prefName);
  long getLongPref(in AString prefName);
  double getDoublePref(in AString prefName);
  boolean getBooleanPref(in AString prefName);
    
  // Return true iff a preference with the specified name and type exists
  // in the preference set.
  boolean hasPref(in AString prefName);
  boolean hasStringPref(in AString prefName);
  boolean hasLongPref(in AString prefName);
  boolean hasDoublePref(in AString prefName);
  boolean hasBooleanPref(in AString prefName);

  // Retrieve a particular preference from the preference set, or in the case
  // of the preference not existing, return the default value provided.
  // If no default value is provided, then the default will be
  // "", 0, 0.0 or False respectively.
  AString getString(in AString prefName, [optional] in AString defaultValue);
  long getLong(in AString prefName, [optional] in long defaultValue);
  double getDouble(in AString prefName, [optional] in double defaultValue);
  boolean getBoolean(in AString prefName, [optional] in boolean defaultValue);

  // Return true iff a preference with the specified name and type exists
  // in the preference set.
  boolean hasPrefHere(in AString prefName);

  // Remove a preference from the preference set.
  void deletePref(in AString prefName);
  // Reset to an empty preference set.
  void reset();

  attribute boolean chainNotifications;
  
  // validation related calls
  // 'validation' must be a python expression that refers to 'value'
  // and returns a true value if the value is corect.
  // e.g. "value > 3" or "positive(3)", where positive() is 
  // defined in koPrefs.py
  void setValidation(in AString prefName, in AString validation);
  // These return true if the proposed value is valid for the 
  // specified preference.  No preference change occurs.
  boolean validateLong(in AString prefName, in long value);
  boolean validateString(in AString prefName, in AString value);
};

[scriptable, uuid(ee911269-fb16-48c4-84ff-9eeb415831e7)]
interface koIUIPreferenceSet : koIPreference {
    koIPreference getPref( in AString prefType );
    void setPref(in AString prefType, in koIPreference pref);
    // XXX enumPrefs unused, commented to prevent usage
    // if needed, reimplement to not use enumerator!
    //nsISimpleEnumerator enumPrefs(in AString prefType);
};

// Project preferences - to allow checking if a prefset is project based.
[scriptable, uuid(b3c0ca87-6187-ac43-a61f-3f6ff68147c3)]
interface koIProjectPreferenceSet : nsISupports {
};

// File preferences - to allow checking if a prefset is file based.
[scriptable, uuid(dacb9866-5ea5-5547-a69f-36b202c3d30c)]
interface koIFilePreferenceSet : nsISupports {
};

/* A preference set cache - a collection of preference sets that can
   be indexed by a unique ID, and automatically maintains a maximum
   size.

*/
[scriptable, uuid(7d095530-d432-4e0c-9575-2405a5cc47b5)]
interface koIPreferenceCache : koIPreference {
    void setPref(in koIPreference pref);
    koIPreferenceSet getPref(in AString id);
    boolean hasPref(in AString id);
    attribute unsigned long length;
    attribute unsigned long max_length; // defaults to 0, meaning no max size.
    nsISimpleEnumerator enumPreferences();
};

// A service to manage top-level, well-known preference sets.
// There is one implicit "global" prefset that can be accessed via
// the "prefs" attribute, or as a named prefset called "global".
// We should have some decent way of "registering" well known
// preference sets, but have punted for now.  See
// |koGlobalPreferenceDefinition| in koPrefs.py
[scriptable, uuid(213246d1-16c4-4c84-8b51-ca218008b013)]
interface koIPrefService : nsISupports {
  
  // Get a well-known preference set.
  koIPreference getPrefs(in AString name);

  // Get the global preference set.  Equivalent to |getPrefs("global")|
  readonly attribute koIPreference prefs;
  
  // integrates project preferences in a way that is easy for most code points
  // in Komodo to reach.  This will return the current project prefs if there
  // is a current project, otherwise, returns the global prefs above.  The parent
  // of project prefs is always global prefs.
  readonly attribute koIPreference effectivePrefs;

  // Save the global preference sets to disk - Equivilent to |savePrefs("global")|
  void saveState();

  // Save the named preference set to disk.
  void savePrefsState(in AString prefName);
};

/**
 * A preference serlializer - helper interface.
 *
 * A class/object can implement this interface, and use a generic serializer
 * to easily save/store preference values, see './pref_serialization.py'.
 */
[scriptable, uuid(c929dc80-3c37-4ba9-acaa-bc2d4e609a8e)]
interface koIPreferenceSerializer : nsISupports {
  koIPreference serializeToPreference();
  void unserializeFromPreference(in koIPreference pref);
};
