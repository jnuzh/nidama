/* Copyright (c) 2000-2006 ActiveState Software Inc.
   See the file LICENSE.txt for licensing information. */

#include "nsISupports.idl"
#include "nsITreeView.idl"

interface koIDocument;

[scriptable, uuid(4d318166-2897-4c08-a1ee-cb5e0054d1b7)]
interface koIDOMTreeView : nsITreeView {
    void setDocument(in koIDocument doc);
    void request();
    void cancel();
    void reset();
    void getStartPos(in long index, [array, size_is(count)] out long pos,
                     out unsigned long count);
    void getEndPos(in long index, [array, size_is(count)] out long pos,
                     out unsigned long count);
    void delayedParse(in AString buffer,
                in wstring basename); //internal use via proxy only
    void refresh(); //internal use via proxy only
    attribute boolean showDetails;
    attribute wstring filterString;
    void locateNode(in long line, in long col);
    /**
     * Return lists containing information for all nodes. The returned order is
     * depth first search of all the available nodes.
     */
    void get_node_regions([array, size_is(count_node_tags)] out wstring node_tags,
                          out unsigned long count_node_tags,
                          [array, size_is(count_node_depths)] out long node_depths,
                          out unsigned long count_node_depths,
                          [array, size_is(count_start_linenos)] out long start_linenos,
                          out unsigned long count_start_linenos,
                          [array, size_is(count_start_cols)] out long start_cols,
                          out unsigned long count_start_cols,
                          [array, size_is(count_end_linenos)] out long end_linenos,
                          out unsigned long count_end_linenos,
                          [array, size_is(count_end_cols)] out long end_cols,
                          out unsigned long count_end_cols);
};

